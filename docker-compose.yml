# backtest deployment using docker images
#
# 0) python bin/gen_env.py prod.env
# 1) docker-compose build 
#
# Then bring up and down the containers...
# 2) docker-compose up      # to bring up containers
# 3) ctrl-c to kill containers
# 4) docker-compose down    # to shutdown all containers
#
# Step 0 will ensure the .env inside the web image matches
# with .env that docker-compose uses. Else passwords will fail.
# Always redo from step 0 whenever prod.env or web programs 
# are changed.

version: '3'
services:
    ### DB START
    # This image will create a database named POSTGRES_DB with
    # superuser POSTGRES_USER.
    db:
        image: postgres:13-alpine
        ports:
            - "5400:5432" # Avoid clash with host's Postgresql
        environment:
            # Required for postgres image
            - POSTGRES_DB=${CUBE_DB_NAME}
            - POSTGRES_USER=${CUBE_DB_USER}
            - POSTGRES_PASSWORD=${CUBE_DB_PASSWORD}
        # Should use a permanent PG_DATA volume for production (later)
    ### DB END
 
    ### DJANGO+GUNICORN START
    # Will create db tables, load app data and run gunicorn
    # Image built with django + gunicorn + our app
    web:
        build:  
            context: .
            dockerfile: ./docker/web/Dockerfile
        environment:
            # Override some .env vars inside image. We still use the rest
            # like DJANGO_SETTINGS_MODULE.
            - CUBE_DB_HOST=db   # follow service name above
            - CUBE_DB_PORT=${CUBE_DB_PORT} # follow port above
            # App dir hardcoded in our build
            - PYTHONPATH=/code
            # Required by our scripts
            - CUBE_DB_NAME=${CUBE_DB_NAME}
            - CUBE_DB_USER=${CUBE_DB_USER}
            - CUBE_DB_PASSWORD=${CUBE_DB_PASSWORD} # same as above
            - FIX_USER_PASSWORD=${FIX_USER_PASSWORD}
        links:
            - db
        ports:
            - "3000:3000"
        depends_on:
            - db
    ### DJANGO+GUNICORN END
     
    ### NGINX START
    # This image will run nginx to serve static files and
    # proxy all other locations to web service above
    nginx:
        build:  
            context: .
            dockerfile: ./docker/nginx/Dockerfile
        links:
            - web
        ports:
            - "8080:8080"
        depends_on:
            - web
    ### NGINX END
