# Backtesting Engine
import os.path
from datetime import date
import json
from pathlib import Path

from btengine.stocks import read_stock
from btengine.strategies import apply_strategy
from btengine.brokers import generate_order, broker_simulator
from btengine.performance import eval_by_trade, gen_trade_no, gen_PL_stat, gen_bt_stat, daily_val

# Get the directory to store results
def get_results_dir():
    # Must match what is defined in django.settings.RESULTS_DIR
    results_dir = Path(__file__).resolve().parent.parent / 'results'
    # Create the directory if it does not exist
    if not os.path.exists(results_dir):
        os.mkdir(results_dir)
        os.chmod(results_dir, 0o775)
    return results_dir

# Function to run backtesting
def api_bt_run(run_no, stock_name, from_date, to_date, init_capital, contract_size, 
        stg_title, stg_cd, id_list, verbose=False):
    '''
    interface program for BT Engine. 
    accept parameters from FE, 
    read stock date, apply strategy, compute performance, and 
    output to files.  
    input: run no generated by FE, stock name, from to date, strategy title, strategy code and list of [indicator and indicator parameters]
    output: Summary of performance, 123P.txt, Data to draw graph - 123G.xls
    example:
       status=api_bt_run(123, 'TENAGA',date(2010,01,01),date(2020,12,31),10000,1000,'SMA Crossing','SINGLE',[['XMA',50,100]])
        if status:
            print ('success')
        else:
            print('no data')
    ''' 
    BT_strategy = stg_title

    # Prepare results dir
    results_dir = get_results_dir()
    if verbose:
        print(BT_strategy)
    stock = read_stock(stock_name, from_date, to_date)
    signal = apply_strategy(stock,stg_cd,id_list)          
    order=generate_order(signal)
    TL=broker_simulator(order, init_capital, contract_size, verbose)
    if len(TL) == 0:
        # TODO: Fix no output file problem when there is no buy and sell signal.
        return False
    else:
        TL1 = eval_by_trade(TL)
        TL1 = gen_trade_no(TL1)
        PL_stat=gen_PL_stat(TL1,verbose=False)
        DV = daily_val(signal, TL1)
        bt_stat = gen_bt_stat(BT_strategy, stock_name, init_capital, DV, PL_stat, stg_cd, id_list, print_stat=verbose)
        with open(os.path.join(results_dir, str(run_no)+"P.json"), "w") as outfile:
            json.dump(bt_stat, outfile)

        # Insert another columns named enterLong and exitLong
        DV.insert(loc=DV.columns.get_loc("buyOrder")+1, column='enterLong', value=None)
        DV.insert(loc=DV.columns.get_loc("enterLong")+1, column='exitLong', value=None)

        # FIXME: Not sure why the df will automatically add another column when we used confluence
        try:
            DV = DV.drop(['Date_1'], axis=1)
        except:
            pass

        # Adding the trxPrice into enterLong or exitLong based on the buyOrder
        DV.loc[DV['buyOrder'] == 1, 'enterLong'] = DV['trxPrice']
        DV.loc[DV['buyOrder'] == -1, 'exitLong'] = DV['trxPrice']

        DV.to_excel(os.path.join(results_dir, str(run_no)+"G.xlsx"))
        return True
    
